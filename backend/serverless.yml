service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  profile: serverless
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    INDEX_NAME: TodoIndex
    SIGNED_URL_EXPIRATION: 300
    IMAGES_S3_BUCKET: aaltheiab-serverless-todos-images-${self:provider.stage} 
    # THUMBNAILS_S3_BUCKET: aaltheiab-serverless-udagram-thumbnail-${self:provider.stage}
    # CONNECTIONS_TABLE: Connections-${self:provider.stage}
    # AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    # AUTH_0_SECRET_FIELD: auth0Secret


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth

  # # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth

  # # TODO: Configure this function
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # GenerateUploadUrl:
    # handler: src/lambda/http/generateUploadUrl.handler
    # events:
    #   - http:
    #       method: post
    #       path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S

          # - AttributeName: name
          #   AttributeType: S
          # - AttributeName: dueDate
          #   AttributeType: S
          # - AttributeName: done
          #   AttributeType: BOOL
          # - AttributeName: attachmentUrl
          #   AttributeType: S
          
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: todoId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      # DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000       
 
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket         

    
    # RequestBodyValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: 'request-body-validator'
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     ValidateRequestBody: true
    #     ValidateRequestParameters: false

    # KMSKey:
    #   Type: AWS::KMS::Key
    #   Properties:
    #     Description: KMS key to encrypt Auth0 secret
    #     KeyPolicy:
    #       Version: '2012-10-17'
    #       Id: key-default-1
    #       Statement:
    #         - Sid: Allow administration of the key
    #           Effect: Allow
    #           Principal:
    #             AWS:
    #               Fn::Join:
    #               - ':'
    #               - - 'arn:aws:iam:'
    #                 - Ref: AWS::AccountId
    #                 - 'root'
    #           Action:
    #             - 'kms:*'
    #           Resource: '*'

    # KMSKeyAlias:
    #   Type: AWS::KMS::Alias
    #   Properties:
    #     AliasName: alias/auth0Key-${self:provider.stage}
    #     TargetKeyId: !Ref KMSKey

    # Auth0Secret:
    #   Type: AWS::SecretsManager::Secret
    #   Properties:
    #     Name: ${self:provider.environment.AUTH_0_SECRET_ID}
    #     Description: Auth0 secret
    #     KmsKeyId: !Ref KMSKey